var _a;
import { BoolMetaField, ObjectMetaField, } from '@motion-canvas/core/lib/meta';
import { EventDispatcher } from '@motion-canvas/core/lib/events';
/**
 * FFmpeg video exporter.
 *
 * @remarks
 * Most of the export logic is handled on the server. This class communicates
 * with the FFmpegBridge through a WebSocket connection which lets it invoke
 * methods on the FFmpegExporterServer class.
 *
 * For example, calling the following method:
 * ```ts
 * async this.invoke('process', 7);
 * ```
 * Will invoke the `process` method on the FFmpegExporterServer class with `7`
 * as the argument. The result of the method will be returned as a Promise.
 *
 * Before any methods can be invoked, the FFmpegExporterServer class must be
 * initialized by invoking `start`.
 */
export class FFmpegExporterClient {
    static meta(project) {
        return new ObjectMetaField(this.displayName, {
            fastStart: new BoolMetaField('fast start', true),
            includeAudio: new BoolMetaField('include audio', true).disable(!project.audio),
        });
    }
    static async create(project, settings) {
        return new FFmpegExporterClient(project, settings);
    }
    constructor(project, settings) {
        this.project = project;
        this.settings = settings;
    }
    async start() {
        const options = this.settings.exporter.options;
        await this.invoke('start', {
            ...this.settings,
            ...options,
            audio: this.project.audio,
            audioOffset: this.project.meta.shared.audioOffset.get() - this.settings.range[0],
        });
    }
    async handleFrame(canvas) {
        await this.invoke('handleFrame', {
            data: canvas.toDataURL('image/png'),
        });
    }
    async stop(result) {
        await this.invoke('end', result);
    }
    /**
     * Remotely invoke a method on the server and wait for a response.
     *
     * @param method - The method name to execute on the server.
     * @param data - The data that will be passed as an argument to the method.
     *               Should be serializable.
     */
    invoke(method, data) {
        if (import.meta.hot) {
            return new Promise((resolve, reject) => {
                const handle = (response) => {
                    if (response.method !== method) {
                        return;
                    }
                    FFmpegExporterClient.response.unsubscribe(handle);
                    if (response.status === 'success') {
                        resolve(response.data);
                    }
                    else {
                        reject({
                            message: 'An error occurred while exporting the video.',
                            remarks: `Method: ${method}<br>Server error: ${response.message}`,
                            object: data,
                        });
                    }
                };
                FFmpegExporterClient.response.subscribe(handle);
                import.meta.hot.send('motion-canvas/ffmpeg', { method, data });
            });
        }
        else {
            throw new Error('FFmpegExporter can only be used locally.');
        }
    }
}
_a = FFmpegExporterClient;
FFmpegExporterClient.id = '@motion-canvas/ffmpeg';
FFmpegExporterClient.displayName = 'Video (FFmpeg)';
FFmpegExporterClient.response = new EventDispatcher();
(() => {
    if (import.meta.hot) {
        import.meta.hot.on(`motion-canvas/ffmpeg-ack`, (response) => _a.response.dispatch(response));
    }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRkZtcGVnRXhwb3J0ZXJDbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9jbGllbnQvRkZtcGVnRXhwb3J0ZXJDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFDTCxhQUFhLEVBQ2IsZUFBZSxHQUVoQixNQUFNLDhCQUE4QixDQUFDO0FBR3RDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQWtCL0Q7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBQ0gsTUFBTSxPQUFPLG9CQUFvQjtJQUl4QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQWdCO1FBQ2pDLE9BQU8sSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUMzQyxTQUFTLEVBQUUsSUFBSSxhQUFhLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQztZQUNoRCxZQUFZLEVBQUUsSUFBSSxhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FDNUQsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUNmO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQWdCLEVBQUUsUUFBMEI7UUFDckUsT0FBTyxJQUFJLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBYUQsWUFDbUIsT0FBZ0IsRUFDaEIsUUFBMEI7UUFEMUIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUMxQyxDQUFDO0lBRUcsS0FBSyxDQUFDLEtBQUs7UUFDaEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBZ0MsQ0FBQztRQUN4RSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO1lBQ3pCLEdBQUcsSUFBSSxDQUFDLFFBQVE7WUFDaEIsR0FBRyxP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