"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FFmpegBridge = void 0;
const FFmpegExporterServer_1 = require("./FFmpegExporterServer");
/**
 * A simple bridge between the FFmpegExporterServer and FFmpegExporterClient.
 *
 * @remarks
 * This class lets the client exporter invoke methods on the server and receive
 * responses using a simple Promise-based API.
 */
class FFmpegBridge {
    constructor(ws, config) {
        this.ws = ws;
        this.config = config;
        this.process = null;
        this.handleMessage = async ({ method, data }) => {
            if (method === 'start') {
                try {
                    this.process = new FFmpegExporterServer_1.FFmpegExporterServer(data, this.config);
                    this.respondSuccess(method, await this.process.start());
                }
                catch (e) {
                    this.respondError(method, e?.message);
                }
                return;
            }
            if (!this.process) {
                this.respondError(method, 'The exporting process has not been started.');
                return;
            }
            if (!(method in this.process)) {
                this.respondError(method, `Unknown method: "${method}".`);
                return;
            }
            try {
                this.respondSuccess(method, await this.process[method](data));
            }
            catch (e) {
                this.respondError(method, e?.message);
            }
            if (method === 'end') {
                this.process = null;
            }
        };
        ws.on('motion-canvas/ffmpeg', this.handleMessage);
    }
    respondSuccess(method, data = {}) {
        this.ws.send('motion-canvas/ffmpeg-ack', {
            status: 'success',
            method,
            data,
        });
    }
    respondError(method, message = 'Unknown error.') {
        this.ws.send('motion-canvas/ffmpeg-ack', {
            status: 'error',
            method,
            message,
        });
    }
}
exports.FFmpegBridge = FFmpegBridge;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRkZtcGVnQnJpZGdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc2VydmVyL0ZGbXBlZ0JyaWRnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxpRUFHZ0M7QUFRaEM7Ozs7OztHQU1HO0FBQ0gsTUFBYSxZQUFZO0lBR3ZCLFlBQ21CLEVBQW1CLEVBQ25CLE1BQW9CO1FBRHBCLE9BQUUsR0FBRixFQUFFLENBQWlCO1FBQ25CLFdBQU0sR0FBTixNQUFNLENBQWM7UUFKL0IsWUFBTyxHQUFnQyxJQUFJLENBQUM7UUFTNUMsa0JBQWEsR0FBRyxLQUFLLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFpQixFQUFFLEVBQUU7WUFDL0QsSUFBSSxNQUFNLEtBQUssT0FBTyxFQUFFO2dCQUN0QixJQUFJO29CQUNGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSwyQ0FBb0IsQ0FDckMsSUFBOEIsRUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FDWixDQUFDO29CQUNGLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2lCQUN6RDtnQkFBQyxPQUFPLENBQU0sRUFBRTtvQkFDZixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBQ3ZDO2dCQUNELE9BQU87YUFDUjtZQUVELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNqQixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSw2Q0FBNkMsQ0FBQyxDQUFDO2dCQUN6RSxPQUFPO2FBQ1I7WUFFRCxJQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxvQkFBb0IsTUFBTSxJQUFJLENBQUMsQ0FBQztnQkFDMUQsT0FBTzthQUNSO1lBRUQsSUFBSTtnQkFDRixJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxNQUFPLElBQUksQ0FBQyxPQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUN4RTtZQUFDLE9BQU8sQ0FBTSxFQUFFO2dCQUNmLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUN2QztZQUVELElBQUksTUFBTSxLQUFLLEtBQUssRUFBRTtnQkFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7YUFDckI7UUFDSCxDQUFDLENBQUM7UUFwQ0EsRUFBRSxDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQXFDTyxjQUFjLENBQUMsTUFBYyxFQUFFLE9BQVksRUFBRTtRQUNuRCxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtZQUN2QyxNQUFNLEVBQUUsU0FBUztZQUNqQixNQUFNO1lBQ04sSUFBSTtTQUNMLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxZQUFZLENBQUMsTUFBYyxFQUFFLE9BQU8sR0FBRyxnQkFBZ0I7UUFDN0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7WUFDdkMsTUFBTSxFQUFFLE9BQU87WUFDZixNQUFNO1lBQ04sT0FBTztTQUNSLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQTVERCxvQ0E0REMifQ==