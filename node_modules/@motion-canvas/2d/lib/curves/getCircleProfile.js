import { Vector2 } from '@motion-canvas/core';
import { ArcSegment } from './ArcSegment';
import { LineSegment } from './LineSegment';
export function getCircleProfile(size, startAngle, endAngle, closed, counterclockwise = false) {
    const profile = {
        arcLength: 0,
        minSin: 1,
        segments: [],
    };
    if (endAngle < startAngle) {
        const loops = Math.floor((startAngle - endAngle) / (Math.PI * 2)) + 1;
        endAngle += Math.PI * 2 * loops;
    }
    else if (endAngle > startAngle + Math.PI * 2) {
        const loops = Math.floor((endAngle - startAngle) / (Math.PI * 2));
        endAngle -= Math.PI * 2 * loops;
    }
    const middleAngle = (startAngle + endAngle) / 2;
    const from = size.mul(Vector2.fromRadians(startAngle));
    const to = size.mul(Vector2.fromRadians(endAngle));
    const middle = size
        .mul(Vector2.fromRadians(middleAngle))
        .scale(counterclockwise ? -1 : 1);
    if (closed) {
        addSegment(profile, new LineSegment(Vector2.zero, from));
    }
    addArcSegment(profile, size, from, middle, startAngle, middleAngle, counterclockwise);
    addArcSegment(profile, size, middle, to, middleAngle, endAngle, counterclockwise);
    if (closed) {
        addSegment(profile, new LineSegment(to, Vector2.zero));
    }
    return profile;
}
function addSegment(profile, segment) {
    profile.segments.push(segment);
    profile.arcLength += segment.arcLength;
}
function addArcSegment(profile, size, from, to, fromAngle, toAngle, counterclockwise) {
    const small = Math.abs(fromAngle - toAngle) <= 180 ? 1 : 0;
    const flip = fromAngle > toAngle ? 0 : 1;
    const counter = counterclockwise ? 0 : 1;
    addSegment(profile, new ArcSegment(from, size, 0, 0, small ^ counter ^ flip, to));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Q2lyY2xlUHJvZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY3VydmVzL2dldENpcmNsZVByb2ZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzVDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFeEMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUcxQyxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLElBQWEsRUFDYixVQUFrQixFQUNsQixRQUFnQixFQUNoQixNQUFlLEVBQ2YsZ0JBQWdCLEdBQUcsS0FBSztJQUV4QixNQUFNLE9BQU8sR0FBaUI7UUFDNUIsU0FBUyxFQUFFLENBQUM7UUFDWixNQUFNLEVBQUUsQ0FBQztRQUNULFFBQVEsRUFBRSxFQUFFO0tBQ2IsQ0FBQztJQUVGLElBQUksUUFBUSxHQUFHLFVBQVUsRUFBRTtRQUN6QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0RSxRQUFRLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0tBQ2pDO1NBQU0sSUFBSSxRQUFRLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQzlDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEUsUUFBUSxJQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztLQUNqQztJQUVELE1BQU0sV0FBVyxHQUFHLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNuRCxNQUFNLE1BQU0sR0FBRyxJQUFJO1NBQ2hCLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3JDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBDLElBQUksTUFBTSxFQUFFO1FBQ1YsVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDMUQ7SUFFRCxhQUFhLENBQ1gsT0FBTyxFQUNQLElBQUksRUFDSixJQUFJLEVBQ0osTUFBTSxFQUNOLFVBQVUsRUFDVixXQUFXLEVBQ1gsZ0JBQWdCLENBQ2pCLENBQUM7SUFDRixhQUFhLENBQ1gsT0FBTyxFQUNQLElBQUksRUFDSixNQUFNLEVBQ04sRUFBRSxFQUNGLFdBQVcsRUFDWCxRQUFRLEVBQ1IsZ0JBQWdCLENBQ2pCLENBQUM7SUFFRixJQUFJLE1BQU0sRUFBRTtRQUNWLFVBQVUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ3hEO0lBRUQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLE9BQXFCLEVBQUUsT0FBZ0I7SUFDekQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsT0FBTyxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FDcEIsT0FBcUIsRUFDckIsSUFBYSxFQUNiLElBQWEsRUFDYixFQUFXLEVBQ1gsU0FBaUIsRUFDakIsT0FBZSxFQUNmLGdCQUF5QjtJQUV6QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNELE1BQU0sSUFBSSxHQUFHLFNBQVMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sT0FBTyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxVQUFVLENBQ1IsT0FBTyxFQUNQLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEdBQUcsT0FBTyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsQ0FDN0QsQ0FBQztBQUNKLENBQUMifQ==