import { CompoundSignalContext } from '../signals';
import { arcLerp, map } from '../tweening';
import { Spacing } from './Spacing';
import { Vector2 } from './Vector';
export class BBox {
    static createSignal(initial, interpolation = BBox.lerp) {
        return new CompoundSignalContext(['x', 'y', 'width', 'height'], (value) => new BBox(value), initial, interpolation).toSignal();
    }
    static lerp(from, to, value) {
        let valueX;
        let valueY;
        let valueWidth;
        let valueHeight;
        if (typeof value === 'number') {
            valueX = valueY = valueWidth = valueHeight = value;
        }
        else if (value instanceof Vector2) {
            valueX = valueWidth = value.x;
            valueY = valueHeight = value.y;
        }
        else {
            valueX = value.x;
            valueY = value.y;
            valueWidth = value.width;
            valueHeight = value.height;
        }
        return new BBox(map(from.x, to.x, valueX), map(from.y, to.y, valueY), map(from.width, to.width, valueWidth), map(from.height, to.height, valueHeight));
    }
    static arcLerp(from, to, value, reverse = false, ratio) {
        ratio ?? (ratio = (from.position.sub(to.position).ctg + from.size.sub(to.size).ctg) / 2);
        return BBox.lerp(from, to, arcLerp(value, reverse, ratio));
    }
    static fromSizeCentered(size) {
        return new BBox(-size.width / 2, -size.height / 2, size.width, size.height);
    }
    static fromPoints(...points) {
        let minX = Infinity;
        let minY = Infinity;
        let maxX = -Infinity;
        let maxY = -Infinity;
        for (const point of points) {
            if (point.x > maxX) {
                maxX = point.x;
            }
            if (point.x < minX) {
                minX = point.x;
            }
            if (point.y > maxY) {
                maxY = point.y;
            }
            if (point.y < minY) {
                minY = point.y;
            }
        }
        return new BBox(minX, minY, maxX - minX, maxY - minY);
    }
    static fromBBoxes(...boxes) {
        let minX = Infinity;
        let minY = Infinity;
        let maxX = -Infinity;
        let maxY = -Infinity;
        for (const box of boxes) {
            const right = box.x + box.width;
            if (right > maxX) {
                maxX = right;
            }
            if (box.x < minX) {
                minX = box.x;
            }
            const bottom = box.y + box.height;
            if (bottom > maxY) {
                maxY = bottom;
            }
            if (box.y < minY) {
                minY = box.y;
            }
        }
        return new BBox(minX, minY, maxX - minX, maxY - minY);
    }
    lerp(to, value) {
        return BBox.lerp(this, to, value);
    }
    get position() {
        return new Vector2(this.x, this.y);
    }
    set position(value) {
        this.x = value.x;
        this.y = value.y;
    }
    get size() {
        return new Vector2(this.width, this.height);
    }
    get center() {
        return new Vector2(this.x + this.width / 2, this.y + this.height / 2);
    }
    get left() {
        return this.x;
    }
    set left(value) {
        this.width += this.x - value;
        this.x = value;
    }
    get right() {
        return this.x + this.width;
    }
    set right(value) {
        this.width = value - this.x;
    }
    get top() {
        return this.y;
    }
    set top(value) {
        this.height += this.y - value;
        this.y = value;
    }
    get bottom() {
        return this.y + this.height;
    }
    set bottom(value) {
        this.height = value - this.y;
    }
    get topLeft() {
        return this.position;
    }
    get topRight() {
        return new Vector2(this.x + this.width, this.y);
    }
    get bottomLeft() {
        return new Vector2(this.x, this.y + this.height);
    }
    get bottomRight() {
        return new Vector2(this.x + this.width, this.y + this.height);
    }
    get corners() {
        return [this.topLeft, this.topRight, this.bottomRight, this.bottomLeft];
    }
    get pixelPerfect() {
        return new BBox(Math.floor(this.x), Math.floor(this.y), Math.ceil(this.width + 1), Math.ceil(this.height + 1));
    }
    constructor(one, two = 0, three = 0, four = 0) {
        this.x = 0;
        this.y = 0;
        this.width = 0;
        this.height = 0;
        if (one === undefined || one === null) {
            return;
        }
        if (typeof one === 'number') {
            this.x = one;
            this.y = two;
            this.width = three;
            this.height = four;
            return;
        }
        if (one instanceof Vector2) {
            this.x = one.x;
            this.y = one.y;
            if (two instanceof Vector2) {
                this.width = two.x;
                this.height = two.y;
            }
            return;
        }
        if (Array.isArray(one)) {
            this.x = one[0];
            this.y = one[1];
            this.width = one[2];
            this.height = one[3];
            return;
        }
        this.x = one.x;
        this.y = one.y;
        this.width = one.width;
        this.height = one.height;
    }
    transform(matrix) {
        return new BBox(this.position.transformAsPoint(matrix), this.size.transform(matrix));
    }
    transformCorners(matrix) {
        return this.corners.map(corner => corner.transformAsPoint(matrix));
    }
    /**
     * Expand the bounding box to accommodate the given spacing.
     *
     * @param value - The value to expand the bounding box by.
     */
    expand(value) {
        const spacing = new Spacing(value);
        const result = new BBox(this);
        result.left -= spacing.left;
        result.top -= spacing.top;
        result.right += spacing.right;
        result.bottom += spacing.bottom;
        return result;
    }
    /**
     * {@inheritDoc expand}
     *
     * @deprecated Use {@link expand} instead.
     */
    addSpacing(value) {
        return this.expand(value);
    }
    includes(point) {
        return (point.x >= this.x &&
            point.x <= this.x + this.width &&
            point.y >= this.y &&
            point.y <= this.y + this.height);
    }
    intersects(other) {
        return (this.left < other.right &&
            this.right > other.left &&
            this.top < other.bottom &&
            this.bottom > other.top);
    }
    intersection(other) {
        const bbox = new BBox();
        if (this.intersects(other)) {
            bbox.left = Math.max(this.left, other.left);
            bbox.top = Math.max(this.top, other.top);
            bbox.right = Math.min(this.right, other.right);
            bbox.bottom = Math.min(this.bottom, other.bottom);
        }
        return bbox;
    }
    union(other) {
        const bbox = new BBox();
        bbox.left = Math.min(this.left, other.left);
        bbox.top = Math.min(this.top, other.top);
        bbox.right = Math.max(this.right, other.right);
        bbox.bottom = Math.max(this.bottom, other.bottom);
        return bbox;
    }
    toSymbol() {
        return BBox.symbol;
    }
    toString() {
        return `BBox(${this.x}, ${this.y}, ${this.width}, ${this.height})`;
    }
    toUniform(gl, location) {
        gl.uniform4f(location, this.x, this.y, this.width, this.height);
    }
    serialize() {
        return { x: this.x, y: this.y, width: this.width, height: this.height };
    }
}
BBox.symbol = Symbol.for('@motion-canvas/core/types/Rect');
//# sourceMappingURL=data:application/json;base64,