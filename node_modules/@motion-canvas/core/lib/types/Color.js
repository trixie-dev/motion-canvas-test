import { Color, mix } from 'chroma-js';
import { SignalContext } from '../signals';
// iife prevents tree shaking from stripping our methods.
const ExtendedColor = (() => {
    Color.symbol = Color.prototype.symbol = Symbol.for('@motion-canvas/core/types/Color');
    Color.lerp = Color.prototype.lerp = (from, to, value, colorSpace = 'lch') => {
        if (typeof from === 'string') {
            from = new Color(from);
        }
        if (typeof to === 'string') {
            to = new Color(to);
        }
        const fromIsColor = from instanceof Color;
        const toIsColor = to instanceof Color;
        if (!fromIsColor) {
            from = toIsColor ? to.alpha(0) : new Color('rgba(0, 0, 0, 0)');
        }
        if (!toIsColor) {
            to = fromIsColor
                ? from.alpha(0)
                : new Color('rgba(0, 0, 0, 0)');
        }
        return mix(from, to, value, colorSpace);
    };
    Color.createLerp = Color.prototype.createLerp =
        (colorSpace) => (from, to, value) => Color.lerp(from, to, value, colorSpace);
    Color.createSignal = (initial, interpolation = Color.lerp) => {
        return new SignalContext(initial, interpolation, undefined, value => new Color(value)).toSignal();
    };
    Color.prototype.toSymbol = () => {
        return Color.symbol;
    };
    Color.prototype.toUniform = function (gl, location) {
        gl.uniform4fv(location, this.gl());
    };
    Color.prototype.serialize = function () {
        return this.css();
    };
    Color.prototype.lerp = function (to, value, colorSpace) {
        return Color.lerp(this, to, value, colorSpace);
    };
    return Color;
})();
export { ExtendedColor as Color };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvQ29sb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLEtBQUssRUFBaUMsR0FBRyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3BFLE9BQU8sRUFBUyxhQUFhLEVBQWMsTUFBTSxZQUFZLENBQUM7QUFzRDlELHlEQUF5RDtBQUN6RCxNQUFNLGFBQWEsR0FBaUIsQ0FBQyxHQUFHLEVBQUU7SUFDeEMsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUNoRCxpQ0FBaUMsQ0FDbEMsQ0FBQztJQUVGLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FDbEMsSUFBMkIsRUFDM0IsRUFBeUIsRUFDekIsS0FBYSxFQUNiLGFBQWdDLEtBQUssRUFDckMsRUFBRTtRQUNGLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQzVCLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtRQUNELElBQUksT0FBTyxFQUFFLEtBQUssUUFBUSxFQUFFO1lBQzFCLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNwQjtRQUVELE1BQU0sV0FBVyxHQUFHLElBQUksWUFBWSxLQUFLLENBQUM7UUFDMUMsTUFBTSxTQUFTLEdBQUcsRUFBRSxZQUFZLEtBQUssQ0FBQztRQUV0QyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLElBQUksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFFLEVBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDM0U7UUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsRUFBRSxHQUFHLFdBQVc7Z0JBQ2QsQ0FBQyxDQUFFLElBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUMxQixDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUNuQztRQUVELE9BQU8sR0FBRyxDQUFDLElBQWEsRUFBRSxFQUFXLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzVELENBQUMsQ0FBQztJQUVGLEtBQUssQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVO1FBQzNDLENBQUMsVUFBNkIsRUFBRSxFQUFFLENBQ2xDLENBQUMsSUFBMkIsRUFBRSxFQUF5QixFQUFFLEtBQWEsRUFBRSxFQUFFLENBQ3hFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFNUMsS0FBSyxDQUFDLFlBQVksR0FBRyxDQUNuQixPQUFvQyxFQUNwQyxnQkFBOEMsS0FBSyxDQUFDLElBQUksRUFDckMsRUFBRTtRQUNyQixPQUFPLElBQUksYUFBYSxDQUN0QixPQUFPLEVBQ1AsYUFBYSxFQUNiLFNBQVMsRUFDVCxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUMxQixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0lBRUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsR0FBRyxFQUFFO1FBQzlCLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUN0QixDQUFDLENBQUM7SUFFRixLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUUxQixFQUEwQixFQUMxQixRQUE4QjtRQUU5QixFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUM7SUFFRixLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRztRQUMxQixPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDLENBQUM7SUFFRixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUVyQixFQUFTLEVBQ1QsS0FBYSxFQUNiLFVBQXVCO1FBRXZCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUM7SUFFRixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFTCxPQUFPLEVBQUMsYUFBYSxJQUFJLEtBQUssRUFBQyxDQUFDIn0=