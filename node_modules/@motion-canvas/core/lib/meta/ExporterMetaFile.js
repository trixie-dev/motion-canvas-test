import { ValueDispatcher } from '../events';
import { EnumMetaField } from './EnumMetaField';
import { MetaField } from './MetaField';
/**
 * Represents the exporter configuration.
 */
export class ExporterMetaField extends MetaField {
    /**
     * Triggered when the nested fields change.
     *
     * @eventProperty
     */
    get onFieldsChanged() {
        return this.fields.subscribable;
    }
    get options() {
        return this.optionFields[this.current];
    }
    constructor(name, project, current = 0) {
        const exporters = project.plugins.flatMap(plugin => plugin.exporters?.(project) ?? []);
        const optionFields = exporters.map(exporter => exporter.meta(project));
        const exporterField = new EnumMetaField('exporter', exporters.map(exporter => ({
            value: exporter.id,
            text: exporter.displayName,
        })), exporters[current]?.id);
        super(name, {
            name: exporterField.get(),
            options: optionFields[current]?.get(),
        });
        this.current = current;
        this.type = Object;
        this.handleChange = () => {
            const value = this.exporterField.get();
            const index = Math.max(this.exporters.findIndex(exporter => exporter.id === value), 0);
            if (this.current !== index) {
                this.options?.onChanged.unsubscribe(this.handleChange);
                this.current = index;
                this.options?.onChanged.subscribe(this.handleChange, false);
                this.fields.current = this.options
                    ? [this.exporterField, this.options]
                    : [this.exporterField];
            }
            this.value.current = {
                name: this.exporterField.get(),
                options: this.options?.get() ?? null,
            };
        };
        this.exporters = exporters;
        this.exporterField = exporterField;
        this.exporterField.onChanged.subscribe(this.handleChange, false);
        this.exporterField.disable(optionFields.length < 2).space();
        this.optionFields = optionFields;
        this.fields = new ValueDispatcher([this.exporterField]);
        if (this.options) {
            this.options.onChanged.subscribe(this.handleChange, false);
            this.fields.current = [this.exporterField, this.options];
        }
    }
    set(value) {
        this.exporterField.set(value.name);
        this.options?.set(value.options ?? {});
    }
    serialize() {
        return {
            name: this.exporterField.serialize(),
            options: this.options?.serialize() ?? null,
        };
    }
    clone() {
        return new this.constructor(this.name, this.exporters, this.current);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhwb3J0ZXJNZXRhRmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tZXRhL0V4cG9ydGVyTWV0YUZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUMxQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUV0Qzs7R0FFRztBQUNILE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxTQUdyQztJQUdBOzs7O09BSUc7SUFDSCxJQUFXLGVBQWU7UUFDeEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztJQUNsQyxDQUFDO0lBR0QsSUFBVyxPQUFPO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQU1ELFlBQ0UsSUFBWSxFQUNaLE9BQWdCLEVBQ1IsVUFBVSxDQUFDO1FBRW5CLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUN2QyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQzVDLENBQUM7UUFDRixNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sYUFBYSxHQUFHLElBQUksYUFBYSxDQUNyQyxVQUFVLEVBQ1YsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDekIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxFQUFFO1lBQ2xCLElBQUksRUFBRSxRQUFRLENBQUMsV0FBVztTQUMzQixDQUFDLENBQUMs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