import { run, waitFor } from '../flow';
import { easeInOutCubic, tween, } from '../tweening';
import { errorToLog, useLogger } from '../utils';
import { DependencyContext } from './DependencyContext';
import { DEFAULT } from './symbols';
import { isReactive, unwrap } from './utils';
export class SignalContext extends DependencyContext {
    constructor(initial, interpolation, owner = undefined, parser = value => value, extensions = {}) {
        super(owner);
        this.initial = initial;
        this.interpolation = interpolation;
        this.parser = parser;
        this.tweening = false;
        Object.defineProperty(this.invokable, 'reset', {
            value: this.reset.bind(this),
        });
        Object.defineProperty(this.invokable, 'save', {
            value: this.save.bind(this),
        });
        Object.defineProperty(this.invokable, 'isInitial', {
            value: this.isInitial.bind(this),
        });
        if (this.initial !== undefined) {
            this.current = this.initial;
            this.markDirty();
            if (!isReactive(this.initial)) {
                this.last = this.parse(this.initial);
            }
        }
        this.extensions = {
            getter: this.getter.bind(this),
            setter: this.setter.bind(this),
            tweener: this.tweener.bind(this),
            ...extensions,
        };
    }
    toSignal() {
        return this.invokable;
    }
    parse(value) {
        return this.parser(value);
    }
    set(value) {
        this.extensions.setter(value);
        return this.owner;
    }
    setter(value) {
        if (value === DEFAULT) {
            value = this.initial;
        }
        if (this.current === value) {
            return this.owner;
        }
        this.current = value;
        this.clearDependencies();
        if (!isReactive(value)) {
            this.last = this.parse(value);
        }
        this.markDirty();
        return this.owner;
    }
    get() {
        return this.extensions.getter();
    }
    getter() {
        if (this.event.isRaised() && isReactive(this.current)) {
            this.clearDependencies();
            this.startCollecting();
            try {
                this.last = this.parse(this.current());
            }
            catch (e) {
                useLogger().error({
                    ...errorToLog(e),
                    inspect: this.owner?.key,
                });
            }
            this.finishCollecting();
        }
        this.event.reset();
        this.collect();
        return this.last;
    }
    invoke(value, duration, timingFunction = easeInOutCubic, interpolationFunction = this.interpolation) {
        if (value === undefined) {
            return this.get();
        }
        if (duration === undefined) {
            return this.set(value);
        }
        const queue = this.createQueue(timingFunction, interpolationFunction);
        return queue.to(value, duration);
    }
    createQueue(defaultTimingFunction, defaultInterpolationFunction) {
        const initial = this.get();
        const queue = [];
        const task = run('animation chain', function* animate() {
            while (queue.length > 0) {
                yield* queue.shift();
            }
        });
        task.to = (value, duration, timingFunction = defaultTimingFunction, interpolationFunction = defaultInterpolationFunction) => {
            defaultTimingFunction = timingFunction;
            defaultInterpolationFunction = interpolationFunction;
            queue.push(this.tween(value, duration, timingFunction, interpolationFunction));
            return task;
        };
        task.back = (time, timingFunction = defaultTimingFunction, interpolationFunction = defaultInterpolationFunction) => {
            defaultTimingFunction = timingFunction;
            defaultInterpolationFunction = interpolationFunction;
            queue.push(this.tween(initial, time, defaultTimingFunction, defaultInterpolationFunction));
            return task;
        };
        task.wait = (duration) => {
            queue.push(waitFor(duration));
            return task;
        };
        task.run = (generator) => {
            queue.push(generator);
            return task;
        };
        task.do = (callback) => {
            queue.push(run(function* () {
                callback();
            }));
            return task;
        };
        return task;
    }
    *tween(value, duration, timingFunction, interpolationFunction) {
        if (value === DEFAULT) {
            value = this.initial;
        }
        this.tweening = true;
        yield* this.extensions.tweener(value, duration, timingFunction, interpolationFunction);
        this.set(value);
        this.tweening = false;
    }
    *tweener(value, duration, timingFunction, interpolationFunction) {
        const from = this.get();
        yield* tween(duration, v => {
            this.set(interpolationFunction(from, this.parse(unwrap(value)), timingFunction(v)));
        });
    }
    dispose() {
        super.dispose();
        this.initial = undefined;
        this.current = undefined;
        this.last = undefined;
    }
    /**
     * Reset the signal to its initial value (if one has been set).
     *
     * @example
     * ```ts
     * const signal = createSignal(7);
     *
     * signal.reset();
     * // same as:
     * signal(7);
     * ```
     */
    reset() {
        if (this.initial !== undefined) {
            this.set(this.initial);
        }
        return this.owner;
    }
    /**
     * Compute the current value of the signal and immediately set it.
     *
     * @remarks
     * This method can be used to stop the signal from updating while keeping its
     * current value.
     *
     * @example
     * ```ts
     * signal.save();
     * // same as:
     * signal(signal());
     * ```
     */
    save() {
        return this.set(this.get());
    }
    /**
     * Check if the signal is currently using its initial value.
     *
     * @example
     * ```ts
     *
     * const signal = createSignal(0);
     * signal.isInitial(); // true
     *
     * signal(5);
     * signal.isInitial(); // false
     *
     * signal(DEFAULT);
     * signal.isInitial(); // true
     * ```
     */
    isInitial() {
        this.collect();
        return this.current === this.initial;
    }
    /**
     * Get the initial value of this signal.
     */
    getInitial() {
        return this.initial;
    }
    /**
     * Get the raw value of this signal.
     *
     * @remarks
     * If the signal was provided with a factory function, the function itself
     * will be returned, without invoking it.
     *
     * This method can be used to create copies of signals.
     *
     * @example
     * ```ts
     * const a = createSignal(2);
     * const b = createSignal(() => a);
     * // b() == 2
     *
     * const bClone = createSignal(b.raw());
     * // bClone() == 2
     *
     * a(4);
     * // b() == 4
     * // bClone() == 4
     * ```
     */
    raw() {
        return this.current;
    }
    /**
     * Is the signal undergoing a tween?
     */
    isTweening() {
        return this.tweening;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbmFsQ29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaWduYWxzL1NpZ25hbENvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFckMsT0FBTyxFQUdMLGNBQWMsRUFDZCxLQUFLLEdBQ04sTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDL0MsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQVNsQyxPQUFPLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQyxNQUFNLFNBQVMsQ0FBQztBQWtDM0MsTUFBTSxPQUFPLGFBSVgsU0FBUSxpQkFBeUI7SUFNakMsWUFDVSxPQUE4QyxFQUNyQyxhQUE0QyxFQUM3RCxRQUFrQyxTQUFVLEVBQ2xDLFNBQTBDLEtBQUssQ0FBQyxFQUFFLENBQVMsS0FBSyxFQUMxRSxhQUE4RCxFQUFFO1FBRWhFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQU5MLFlBQU8sR0FBUCxPQUFPLENBQXVDO1FBQ3JDLGtCQUFhLEdBQWIsYUFBYSxDQUErQjtRQUVuRCxXQUFNLEdBQU4sTUFBTSxDQUEwRDtRQU5sRSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBV3pCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7WUFDN0MsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUM3QixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFO1lBQzVDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDNUIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRTtZQUNqRCxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ2pDLENBQUMsQ0FBQztRQUVILElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzVCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUVqQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUN0QztTQUNGO1FBRUQsSUFBSSxDQUFDLFVBQVUsR0FBRztZQUNoQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzlCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDOUIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNoQyxHQUFHLFVBQVU7U0FDZCxDQUFDO0lBQ0osQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFtQjtRQUM5QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVNLEdBQUcsQ0FBQyxLQUFpRDtRQUMxRCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFpRDtRQUM3RCxJQUFJLEtBQUssS0FBSyxPQUFPLEVBQUU7WUFDckIsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFRLENBQUM7U0FDdkI7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO1lBQzFCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNuQjtRQUVELElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRXpCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQy9CO1FBRUQsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRU0sR0FBRztRQUNSLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRU0sTUFBTTtRQUNYLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3JELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN2QixJQUFJO2dCQUNGLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQzthQUN4QztZQUFDLE9BQU8sQ0FBTSxFQUFFO2dCQUNmLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztvQkFDaEIsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO29CQUNoQixPQUFPLEVBQVEsSUFBSSxDQUFDLEtBQU0sRUFBRSxHQUFHO2lCQUNoQyxDQUFDLENBQUM7YUFDSjtZQUNELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1NBQ3pCO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFZixPQUFPLElBQUksQ0FBQyxJQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVrQixNQUFNLENBQ3ZCLEtBQWtELEVBQ2xELFFBQWlCLEVBQ2pCLGlCQUFpQyxjQUFjLEVBQy9DLHdCQUF1RCxJQUFJLENBQUMsYUFBYTtRQUV6RSxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDdkIsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDbkI7UUFFRCxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hCO1FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUN0RSxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFUyxXQUFXLENBQ25CLHFCQUFxQyxFQUNyQyw0QkFBMkQ7UUFFM0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzNCLE1BQU0sS0FBSyxHQUFzQixFQUFFLENBQUM7UUFFcEMsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxDQUFDLE9BQU87WUFDbkQsT0FBTyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDdkIsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRyxDQUFDO2FBQ3ZCO1FBQ0gsQ0FBQyxDQUEwQyxDQUFDO1FBRTVDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FDUixLQUFpRCxFQUNqRCxRQUFnQixFQUNoQixjQUFjLEdBQUcscUJBQXFCLEVBQ3RDLHFCQUFxQixHQUFHLDRCQUE0QixFQUNwRCxFQUFFO1lBQ0YscUJBQXFCLEdBQUcsY0FBYyxDQUFDO1lBQ3ZDLDRCQUE0QixHQUFHLHFCQUFxQixDQUFDO1lBQ3JELEtBQUssQ0FBQyxJQUFJLENBQ1IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxxQkFBcUIsQ0FBQyxDQUNuRSxDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxHQUFHLENBQ1YsSUFBWSxFQUNaLGNBQWMsR0FBRyxxQkFBcUIsRUFDdEMscUJBQXFCLEdBQUcsNEJBQTRCLEVBQ3BELEVBQUU7WUFDRixxQkFBcUIsR0FBRyxjQUFjLENBQUM7WUFDdkMsNEJBQTRCLEdBQUcscUJBQXFCLENBQUM7WUFDckQsS0FBSyxDQUFDLElBQUksQ0FDUixJQUFJLENBQUMsS0FBSyxDQUNSLE9BQU8sRUFDUCxJQUFJLEVBQ0oscUJBQXFCLEVBQ3JCLDRCQUE0QixDQUM3QixDQUNGLENBQUM7WUFDRixPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQUU7WUFDL0IsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM5QixPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxTQUEwQixFQUFFLEVBQUU7WUFDeEMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN0QixPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxRQUFvQixFQUFFLEVBQUU7WUFDakMsS0FBSyxDQUFDLElBQUksQ0FDUixHQUFHLENBQUMsUUFBUSxDQUFDO2dCQUNYLFFBQVEsRUFBRSxDQUFDO1lBQ2IsQ0FBQyxDQUFDLENBQ0gsQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDO1FBRUYsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRVMsQ0FBQyxLQUFLLENBQ2QsS0FBaUQsRUFDakQsUUFBZ0IsRUFDaEIsY0FBOEIsRUFDOUIscUJBQW9EO1FBRXBELElBQUksS0FBSyxLQUFLLE9BQU8sRUFBRTtZQUNyQixLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQVEsQ0FBQztTQUN2QjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUM1QixLQUFLLEVBQ0wsUUFBUSxFQUNSLGNBQWMsRUFDZCxxQkFBcUIsQ0FDdEIsQ0FBQztRQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUVNLENBQUMsT0FBTyxDQUNiLEtBQWdDLEVBQ2hDLFFBQWdCLEVBQ2hCLGNBQThCLEVBQzlCLHFCQUFvRDtRQUVwRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDeEIsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRTtZQUN6QixJQUFJLENBQUMsR0FBRyxDQUNOLHFCQUFxQixDQUNuQixJQUFJLEVBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDekIsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUNsQixDQUNGLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFZSxPQUFPO1FBQ3JCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7O09BV0c7SUFDSSxLQUFLO1FBQ1YsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUM5QixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QjtRQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7T0FhRztJQUNJLElBQUk7UUFDVCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7T0FlRztJQUNJLFNBQVM7UUFDZCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixPQUFPLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN2QyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxVQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXNCRztJQUNJLEdBQUc7UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksVUFBVTtRQUNmLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0NBQ0YifQ==