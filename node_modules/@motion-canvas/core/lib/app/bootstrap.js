import DefaultPlugin from '../plugin/DefaultPlugin';
import { Logger } from './Logger';
import { ProjectMetadata } from './ProjectMetadata';
import { createSettingsMetadata } from './SettingsMetadata';
/**
 * Bootstrap a project.
 *
 * @param name - The name of the project.
 * @param versions - Package versions.
 * @param plugins - Loaded plugins.
 * @param config - Project settings.
 * @param metaFile - The project meta file.
 * @param settingsFile - The settings meta file.
 * @param logger - An optional logger instance.
 *
 * @internal
 */
export function bootstrap(name, versions, plugins, config, metaFile, settingsFile, logger = config.logger ?? new Logger()) {
    const settings = createSettingsMetadata();
    settingsFile.attach(settings);
    const project = {
        name,
        ...config,
        plugins,
        versions,
        settings,
        logger,
    };
    project.meta = new ProjectMetadata(project);
    project.meta.shared.set(settings.defaults.get());
    project.experimentalFeatures ?? (project.experimentalFeatures = false);
    metaFile.attach(project.meta);
    return project;
}
/**
 * Bootstrap a project together with all editor plugins.
 *
 * @param name - The name of the project.
 * @param versions - Package versions.
 * @param plugins - Loaded plugins.
 * @param config - Project settings.
 * @param metaFile - The project meta file.
 * @param settingsFile - The settings meta file.
 *
 * @internal
 */
export async function editorBootstrap(name, versions, plugins, config, metaFile, settingsFile) {
    const logger = config.logger ?? new Logger();
    const promises = [Promise.resolve(DefaultPlugin())];
    if (config.plugins) {
        for (const plugin of config.plugins) {
            promises.push(parsePlugin(plugin, logger));
        }
    }
    for (const scene of config.scenes) {
        if (scene.plugins) {
            for (const plugin of scene.plugins) {
                promises.push(parsePlugin(plugin, logger));
            }
        }
    }
    for (const plugin of plugins) {
        promises.push(parsePlugin(plugin, logger));
    }
    const pluginSet = new Set();
    const resolvedPlugins = await Promise.all(promises);
    const includedPlugins = [];
    let resolvedConfig = config;
    for (const plugin of resolvedPlugins) {
        if (!plugin || pluginSet.has(plugin.name)) {
            continue;
        }
        pluginSet.add(plugin.name);
        includedPlugins.push(plugin);
        resolvedConfig = {
            ...resolvedConfig,
            ...(plugin.settings?.(resolvedConfig) ?? {}),
        };
    }
    const project = bootstrap(name, versions, includedPlugins, resolvedConfig, metaFile, settingsFile);
    includedPlugins.forEach(plugin => plugin.project?.(project));
    return project;
}
async function parsePlugin(plugin, logger) {
    if (typeof plugin === 'string') {
        try {
            let url = `/@id/${plugin}`;
            const version = new URL(import.meta.url).searchParams.get('v');
            if (version) {
                url += `?v=${version}`;
            }
            plugin = (await import(/* @vite-ignore */ url)).default();
        }
        catch (e) {
            console.error(e);
            logger.error({
                message: `Failed to load plugin "${plugin}": ${e.message}.`,
                stack: e.stack,
                remarks: e.remarks,
            });
            return null;
        }
    }
    return plugin;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcC9ib290c3RyYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxhQUFhLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUVoQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFMUQ7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FDdkIsSUFBWSxFQUNaLFFBQWtCLEVBQ2xCLE9BQWlCLEVBQ2pCLE1BQXVCLEVBQ3ZCLFFBQXVCLEVBQ3ZCLFlBQTJCLEVBQzNCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksTUFBTSxFQUFFO0lBRXRDLE1BQU0sUUFBUSxHQUFHLHNCQUFzQixFQUFFLENBQUM7SUFDMUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUU5QixNQUFNLE9BQU8sR0FBRztRQUNkLElBQUk7UUFDSixHQUFHLE1BQU07UUFDVCxPQUFPO1FBQ1AsUUFBUTtRQUNSLFFBQVE7UUFDUixNQUFNO0tBQ0ksQ0FBQztJQUViLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNqRCxPQUFPLENBQUMsb0JBQW9CLEtBQTVCLE9BQU8sQ0FBQyxvQkFBb0IsR0FBSyxLQUFLLEVBQUM7SUFDdkMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFOUIsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztB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