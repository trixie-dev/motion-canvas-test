const SOURCE_URL_REGEX = /^\/\/# sourceURL=(.*)$/gm;
const INFO_LOG_REGEX = /ERROR: \d+:(\d+): (.*)/g;
const INFO_TOKEN_REGEX = /^'([^']+)'/;
export class SharedWebGLContext {
    constructor(logger) {
        this.logger = logger;
        this.gl = null;
        this.currentOwner = null;
        this.programLookup = new Map();
    }
    borrow(owner) {
        if (this.currentOwner === owner) {
            return this.gl;
        }
        this.currentOwner?.teardown(this.gl);
        this.currentOwner = owner;
        this.currentOwner.setup(this.getGL());
        return this.gl;
    }
    /**
     * Dispose the WebGL context to free up resources.
     */
    dispose() {
        if (!this.gl) {
            return;
        }
        this.currentOwner?.teardown(this.gl);
        this.currentOwner = null;
        this.gl.useProgram(null);
        for (const { program, fragment, vertex } of this.programLookup.values()) {
            this.gl.deleteProgram(program);
            this.gl.deleteShader(fragment);
            this.gl.deleteShader(vertex);
        }
        this.programLookup.clear();
        this.gl.getExtension('WEBGL_lose_context')?.loseContext();
        this.gl.canvas.remove();
        this.gl = null;
    }
    getProgram(fragment, vertex) {
        const key = `${fragment}#${vertex}`;
        if (this.programLookup.has(key)) {
            return this.programLookup.get(key).program;
        }
        const gl = this.getGL();
        const fragmentShader = this.getShader(gl.FRAGMENT_SHADER, fragment);
        const vertexShader = this.getShader(gl.VERTEX_SHADER, vertex);
        if (!fragmentShader || !vertexShader) {
            return null;
        }
        const program = gl.createProgram();
        gl.attachShader(program, fragmentShader);
        gl.attachShader(program, vertexShader);
        gl.linkProgram(program);
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            this.logger.error({
                message: 'Failed to initialize the shader program.',
                remarks: gl.getProgramInfoLog(program) ?? undefined,
                stack: new Error().stack,
            });
            gl.deleteProgram(program);
            return null;
        }
        this.programLookup.set(key, {
            program,
            fragment: fragmentShader,
            vertex: vertexShader,
        });
        return program;
    }
    getShader(type, source) {
        const gl = this.getGL();
        const shader = gl.createShader(type);
        gl.shaderSource(shader, source);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            const log = gl.getShaderInfoLog(shader);
            logGlslError(this.logger, log, source);
            gl.deleteShader(shader);
            return null;
        }
        return shader;
    }
    getGL() {
        if (this.gl) {
            return this.gl;
        }
        this.gl = document.createElement('canvas').getContext('webgl2', {
            depth: false,
            premultipliedAlpha: false,
            stencil: false,
            powerPreference: 'high-performance',
        });
        if (!this.gl) {
            throw new Error('Failed to initialize WebGL.');
        }
        /* NOTE: Temporary debugging code
        const canvas = this.gl.canvas as HTMLCanvasElement;
        document.body.append(canvas);
        canvas.style.position = 'absolute';
        canvas.style.top = '16px';
        canvas.style.right = '16px';
        canvas.style.width = '300px';
        canvas.style.borderRadius = '4px';
        canvas.style.border = '1px solid #ccc';
        canvas.style.backgroundColor = '#141414';
        canvas.style.zIndex = '1000';
        */
        return this.gl;
    }
}
function logGlslError(logger, log, source) {
    let sourceUrl = null;
    SOURCE_URL_REGEX.lastIndex = 0;
    const sourceMatch = SOURCE_URL_REGEX.exec(source);
    if (sourceMatch) {
        const url = new URL(sourceMatch[1], window.location.origin);
        url.searchParams.set('t', Date.now().toString());
        sourceUrl = url.toString();
    }
    if (!log) {
        logger.error({
            message: `Unknown shader compilation error.`,
            stack: fakeStackTrace(sourceUrl, 1, 0),
        });
        return null;
    }
    let logged = false;
    let result;
    while ((result = INFO_LOG_REGEX.exec(log))) {
        const [, line, message] = result;
        let column = 0;
        const match = message.match(INFO_TOKEN_REGEX);
        if (match) {
            const tokenLine = source.split('\n')[parseInt(line) - 1];
            const index = tokenLine.indexOf(match[1]);
            if (index !== -1) {
                column = index;
            }
            if (match[1] === 'include') {
                const line = source
                    .split('\n')
                    .find(line => line.startsWith('#include'));
                if (line) {
                    logged = true;
                    logger.error({
                        message: `Shader compilation error: ${message}`,
                        remarks: "<p>The <code>#include</code> directive requires the use of a preprocessor.</p>\n<p>Make sure to import the shader from a file:</p>\n<pre class=\"\"><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> shader <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./shader.glsl&#x27;</span>;</code></pre><p>Do <strong>NOT</strong> use the raw loader:</p>\n<pre class=\"\"><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> shader <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./shader.glsl?raw&#x27;</span>;</code></pre><p>Do <strong>NOT</strong> use <code>#include</code> in an inline string:</p>\n<pre class=\"\"><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> shader = <span class=\"hljs-string\">`\\\n#include &quot;example.glsl&quot;\n`</span>;</code></pre><p><a href='https://motioncanvas.io/docs/shaders' target='_blank'>Learn more</a> about working with shaders.</p>\n",
                    });
                    break;
                }
            }
        }
        logged = true;
        logger.error({
            message: `Shader compilation error: ${message}`,
            stack: fakeStackTrace(sourceUrl, line, column),
        });
    }
    if (!logged) {
        logger.error({
            message: `Shader compilation error: ${log}`,
            stack: fakeStackTrace(sourceUrl, 1, 0),
        });
    }
}
function fakeStackTrace(file, line, column) {
    if (!file) {
        return undefined;
    }
    return navigator.userAgent.toLowerCase().includes('chrome')
        ? `  at (${file}:${line}:${column})`
        : `@${file}:${line}:${column}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2hhcmVkV2ViR0xDb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcC9TaGFyZWRXZWJHTENvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxnQkFBZ0IsR0FBRywwQkFBMEIsQ0FBQztBQUNwRCxNQUFNLGNBQWMsR0FBRyx5QkFBeUIsQ0FBQztBQUNqRCxNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQztBQWdCdEMsTUFBTSxPQUFPLGtCQUFrQjtJQUs3QixZQUFvQyxNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUoxQyxPQUFFLEdBQWtDLElBQUksQ0FBQztRQUN6QyxpQkFBWSxHQUE2QixJQUFJLENBQUM7UUFDckMsa0JBQWEsR0FBRyxJQUFJLEdBQUcsRUFBNEIsQ0FBQztJQUVoQixDQUFDO0lBRS9DLE1BQU0sQ0FBQyxLQUF3QjtRQUNwQyxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssS0FBSyxFQUFFO1lBQy9CLE9BQU8sSUFBSSxDQUFDLEVBQUcsQ0FBQztTQUNqQjtRQUVELElBQUksQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFHLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN0QyxPQUFPLElBQUksQ0FBQyxFQUFHLENBQUM7SUFDbEIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1osT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBRXpCLElBQUksQ0FBQyxFQUFFLENBQUMs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