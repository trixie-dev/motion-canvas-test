import { EventDispatcher } from '../events';
import { noop } from '../flow';
import { createSignal } from '../signals';
import { endThread, startThread, useLogger } from '../utils';
import { isThreadGenerator } from './ThreadGenerator';
import { getTaskName, setTaskName } from './names';
/**
 * A class representing an individual thread.
 *
 * @remarks
 * Thread is a wrapper for a generator that can be executed concurrently.
 *
 * Aside from the main thread, all threads need to have a parent.
 * If a parent finishes execution, all of its child threads are terminated.
 */
export class Thread {
    get onDeferred() {
        return this.deferred.subscribable;
    }
    /**
     * The fixed time of this thread.
     *
     * @remarks
     * Fixed time is a multiple of the frame duration. It can be used to account
     * for the difference between this thread's {@link time} and the time of the
     * current animation frame.
     */
    get fixed() {
        return this.fixedTime;
    }
    /**
     * Check if this thread or any of its ancestors has been canceled.
     */
    get canceled() {
        return this.isCanceled || (this.parent?.canceled ?? false);
    }
    get paused() {
        return this.isPaused || (this.parent?.paused ?? false);
    }
    get root() {
        return this.parent?.root ?? this;
    }
    constructor(
    /**
     * The generator wrapped by this thread.
     */
    runner) {
        this.runner = runner;
        this.deferred = new EventDispatcher();
        this.children = [];
        /**
         * The current time of this thread.
         *
         * @remarks
         * Used by {@link flow.waitFor} and other time-based functions to properly
         * support durations shorter than one frame.
         */
        this.time = createSignal(0);
        this.parent = null;
        this.isCanceled = false;
        this.isPaused = false;
        this.fixedTime = 0;
        this.queue = [];
        if (this.runner.task) {
            useLogger().error({
                message: `The generator "${getTaskName(this.runner)}" is already being executed by another thread.`,
                remarks: "<p>This usually happens when you mistakenly reuse a generator that is already\nrunning.</p>\n<p>For example, using <code>yield</code> here will run the opacity generator concurrently and\nstore it in the <code>task</code> variable (in case you want to cancel or await it later):</p>\n<pre class=\"\"><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> task = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);</code></pre><p>Trying to <code>yield</code> this task again will cause the current error:</p>\n<pre class=\"\"><code class=\"language-ts\"><span class=\"hljs-keyword\">yield</span> task;</code></pre><p>Passing it to other flow functions will also cause the error:</p>\n<pre class=\"\"><code class=\"language-ts\"><span class=\"hljs-keyword\">yield</span>* <span class=\"hljs-title function_\">all</span>(task);</code></pre><p>Try to investigate your code looking for <code>yield</code> statements whose return value\nis reused in this way. Here&#39;s an example of a common mistake:</p>\n<pre class=\"wrong\"><code class=\"language-ts\"><span class=\"hljs-keyword\">yield</span>* <span class=\"hljs-title function_\">all</span>(\n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), \n  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">x</span>(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">1</span>),\n);</code></pre><pre class=\"correct\"><code class=\"language-ts\"><span class=\"hljs-keyword\">yield</span>* <span class=\"hljs-title function_\">all</span>(\n  <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), \n  <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">x</span>(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">1</span>),\n);</code></pre>",
            });
            this.runner = noop();
        }
        this.runner.task = this;
    }
    /**
     * Progress the wrapped generator once.
     */
    next() {
        if (this.paused) {
            return {
                value: null,
                done: false,
            };
        }
        startThread(this);
        const result = this.runner.next(this.value);
        endThread(this);
        this.value = null;
        return result;
    }
    /**
     * Prepare the thread for the next update cycle.
     *
     * @param dt - The delta time of the next cycle.
     */
    update(dt) {
        if (!this.paused) {
            this.time(this.time() + dt);
            this.fixedTime += dt;
        }
        this.children = this.children.filter(child => !child.canceled);
    }
    spawn(child) {
        if (!isThreadGenerator(child)) {
            child = child();
        }
        this.queue.push(child);
        return child;
    }
    add(child) {
        child.parent = this;
        child.isCanceled = false;
        child.time(this.time());
        child.fixedTime = this.fixedTime;
        this.children.push(child);
        setTaskName(child.runner, `unknown ${this.children.length}`);
    }
    drain(callback) {
        this.queue.forEach(callback);
        this.queue = [];
    }
    cancel() {
        this.deferred.clear();
        this.runner.return();
        this.isCanceled = true;
        this.parent = null;
        this.drain(task => task.return());
    }
    pause(value) {
        this.isPaused = value;
    }
    runDeferred() {
        startThread(this);
        this.deferred.dispatch();
        endThread(this);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhyZWFkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RocmVhZGluZy9UaHJlYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUMxQyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQzdCLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDeEMsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQzNELE9BQU8sRUFBa0IsaUJBQWlCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUVyRSxPQUFPLEVBQUMsV0FBVyxFQUFFLFdBQVcsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUVqRDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sT0FBTyxNQUFNO0lBQ2pCLElBQVcsVUFBVTtRQUNuQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDO0lBQ3BDLENBQUM7SUFrQkQ7Ozs7Ozs7T0FPRztJQUNILElBQVcsS0FBSztRQUNkLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLElBQUksS0FBSyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLElBQUksQ0FBQztJQUNuQyxDQUFDO0lBUUQ7SUFDRTs7T0FFRztJQUNhLE1BQXlD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